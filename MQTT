
#include <WiFiNINA.h>       // Library for WiFi functionality on Arduino Nano 33 IoT
#include <PubSubClient.h>   // Library for MQTT communication

//  WiFi Credentials 
const char* ssid = "Redmi 12C";          
const char* password = "kanwalpreet";    

// MQTT Broker Details 
const char* mqtt_server = "broker.emqx.io";  // Public MQTT broker
const int mqtt_port = 1883;                  
const char* MyName = "Prabhsimar Kaur";      

// -------------------- Global Objects --------------------
WiFiClient wifiClient;         
PubSubClient client(wifiClient); // Create MQTT client using WiFi


const int trigPin = 3;    // Ultrasonic sensor TRIG pin
const int echoPin = 2;    // Ultrasonic sensor ECHO pin
const int ledPin = 10;    // LED pin for feedback

//Distance Measurement 
// Uses ultrasonic sensor to measure distance in centimeters
long getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);           
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);          
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);   // Time in µs for echo pulse
  return duration * 0.034 / 2;              // Convert µs → cm (speed of sound)
}

// LED blink handling
// Blink the LED a given number of times with a given delay
void blinkLED(int times, int delayMs) {
  for (int i = 0; i < times; i++) {
    digitalWrite(ledPin, HIGH);
    delay(delayMs);
    digitalWrite(ledPin, LOW);
    delay(delayMs);
  }
}

//  MQTT Callback 
// Handles incoming messages on subscribed topics
void callback(char* topic, byte* payload, unsigned int length) {
  String msg = "";
  for (int i = 0; i < length; i++) {
    msg += (char)payload[i]; // Convert payload to string
  }

  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("]: ");
  Serial.println(msg);

  // React based on received message content
  if (msg == "wave") {
    blinkLED(3, 300);   // Quick triple blink
  } else if (msg == "pat") {
    blinkLED(2, 800);   // Slow double blink
  }
}

// Reconnect to MQTT
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("Nano33IoTClient")) {
      Serial.println("connected");
      client.subscribe("SIT210/wave"); // Subscribe to topic for control messages
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());  
      delay(2000);                     
    }
  }
}


void setup() {
  Serial.begin(115200); 

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledPin, OUTPUT);

  // Connect to WiFi
  Serial.print("Connecting to WiFi ");
  Serial.println(ssid);
  int status = WL_IDLE_STATUS;
  while (status != WL_CONNECTED) {
    status = WiFi.begin(ssid, password);
    delay(5000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Setup MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}


void loop() {
  // Ensure MQTT stays connected
  if (!client.connected()) {
    reconnect();
  }
  client.loop(); 

  // Measure distance with ultrasonic sensor
  long distance = getDistance();
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // CASE 1: Hand detected near sensor (within 20 cm)
  if (distance < 20) {
    client.publish("SIT210/wave", MyName); // Publish "wave" event
    blinkLED(1, 200);                      // Single blink for confirmation
    delay(2000); // Prevent multiple triggers too quickly
  }

  // CASE 2: No hand detected (distance > 20 cm)
  else if (distance > 20) {
    // Optional action: keep LED off or publish "no wave" status
    digitalWrite(ledPin, LOW);  // Ensure LED stays off when nothing detected
    // client.publish("SIT210/idle", "No object nearby");  // Uncomment to send idle status
  }
}
